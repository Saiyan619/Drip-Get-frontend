import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Search, X } from 'lucide-react';
export const ProductFilters = ({ filters, searchInput, categories, hasActiveFilters, onSearchChange, onFilterChange, onClearFilters }) => {
    return (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center justify-between", children: [_jsx("span", { children: "Filters" }), hasActiveFilters && (_jsx(Button, { variant: "ghost", size: "sm", onClick: onClearFilters, children: _jsx(X, { className: "h-4 w-4" }) }))] }) }), _jsxs(CardContent, { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Search" }), _jsxs("div", { className: "relative", children: [_jsx(Search, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400" }), _jsx(Input, { placeholder: "Search products...", value: searchInput, onChange: (e) => onSearchChange(e.target.value), className: "pl-10" })] })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Category" }), _jsx("p", { children: categories })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Price Range" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { type: "number", placeholder: "Min", value: filters.minPrice || '', onChange: (e) => onFilterChange('minPrice', e.target.value), className: "flex-1" }), _jsx(Input, { type: "number", placeholder: "Max", value: filters.maxPrice || '', onChange: (e) => onFilterChange('maxPrice', e.target.value), className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Sort By" }), _jsxs(Select, { value: `${filters.sortBy || 'createdAt'}-${filters.order || 'desc'}`, onValueChange: (value) => {
                                    const [sortBy, order] = value.split('-');
                                    onFilterChange('sortBy', sortBy);
                                    onFilterChange('order', order);
                                }, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "createdAt-desc", children: "Newest First" }), _jsx(SelectItem, { value: "createdAt-asc", children: "Oldest First" }), _jsx(SelectItem, { value: "price-asc", children: "Price: Low to High" }), _jsx(SelectItem, { value: "price-desc", children: "Price: High to Low" }), _jsx(SelectItem, { value: "name-asc", children: "Name: A to Z" }), _jsx(SelectItem, { value: "name-desc", children: "Name: Z to A" })] })] })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Items per page" }), _jsxs(Select, { value: filters.limit?.toString() || '10', onValueChange: (value) => onFilterChange('limit', parseInt(value)), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "5", children: "5" }), _jsx(SelectItem, { value: "10", children: "10" }), _jsx(SelectItem, { value: "20", children: "20" }), _jsx(SelectItem, { value: "50", children: "50" })] })] })] })] })] }));
};
