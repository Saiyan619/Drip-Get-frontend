import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Plus, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
const Variants = ({ addVariant, removeVariant, newProduct, updateVariant, colors, sizes }) => {
    return (_jsx("div", { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("h3", { className: "text-lg font-semibold", children: "Product Variants" }), _jsxs(Button, { variant: "outline", size: "sm", onClick: addVariant, children: [_jsx(Plus, { className: "h-4 w-4 mr-1" }), "Add Variant"] })] }), _jsx("div", { className: "space-y-4", children: newProduct.variants.map((variant, index) => (_jsxs("div", { className: "p-4 border rounded-lg space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("h4", { className: "font-medium", children: ["Variant ", index + 1] }), newProduct.variants.length > 1 && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => removeVariant(index), className: "text-red-600 hover:text-red-700", children: _jsx(Trash2, { className: "h-4 w-4" }) }))] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Size *" }), _jsxs("select", { value: variant.size, onChange: (e) => updateVariant(index, "size", e.target.value), className: "w-full px-3 py-2 border rounded-lg", children: [_jsx("option", { value: "", children: "Select Size" }), sizes.map((size) => (_jsx("option", { value: size, children: size }, size)))] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Color *" }), _jsxs("select", { value: variant.color, onChange: (e) => updateVariant(index, "color", e.target.value), className: "w-full px-3 py-2 border rounded-lg", children: [_jsx("option", { value: "", children: "Select Color" }), colors.map((color) => (_jsx("option", { value: color, children: color }, color)))] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Inventory *" }), _jsx(Input, { type: "number", min: "0", value: variant.inventory, onChange: (e) => updateVariant(index, "inventory", Number.parseInt(e.target.value) || 0), placeholder: "10" })] }), _jsxs("div", { children: [_jsx(Label, { children: "SKU" }), _jsx(Input, { value: variant.sku, onChange: (e) => updateVariant(index, "sku", e.target.value), placeholder: "Auto-generated" }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Leave empty to auto-generate" })] })] })] }, index))) })] }) }));
};
export default Variants;
